#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

BIN_PATH="$BUILD_DIR/bin"
mkdir -p $CACHE_DIR $BIN_PATH

FETCH_URL="https://github.com/gruntwork-io/fetch/releases/download/v0.4.5/fetch_linux_amd64"
FETCH_PATH="$CACHE_DIR/fetch"

if [ -f $FETCH_PATH ]; then
  echo "-----> Using fetch from cache"
else
  echo "-----> Downloading fetch"
  curl -L $FETCH_URL -o $FETCH_PATH
fi

# Make sure `fetch` is executable
chmod +x $FETCH_PATH

if [ -f "$ENV_DIR/HEROKU_ANYCABLE_GO_VERSION" ]; then
  version=`cat $ENV_DIR/HEROKU_ANYCABLE_GO_VERSION`
else
  version="1.5.6"
fi

if [ -f "$ENV_DIR/HEROKU_ANYCABLE_GO_REPO" ]; then
  repo=`cat $ENV_DIR/HEROKU_ANYCABLE_GO_REPO`
  echo "-----> Using custom repo: ${repo}"
else
  repo="https://github.com/anycable/anycable-go"
fi

if [ -f "$ENV_DIR/HEROKU_ANYCABLE_GO_GITHUB_TOKEN" ]; then
  echo "-----> Found GitHub token"
  token=`cat $ENV_DIR/HEROKU_ANYCABLE_GO_GITHUB_TOKEN`
else
  token=""
fi

if [ -f "$ENV_DIR/HEROKU_ANYCABLE_GO_BINARY_NAME" ]; then
  binary_name=`cat $ENV_DIR/HEROKU_ANYCABLE_GO_BINARY_NAME`
  echo "-----> Using custom binary name: ${binary_name}"
else
  binary_name="anycable-go"
fi

if [ -f "$ENV_DIR/HEROKU_ANYCABLE_GO_VERSION_SUFFIX" ]; then
  version_prefix_val=`cat $ENV_DIR/HEROKU_ANYCABLE_GO_VERSION_SUFFIX`
  if [[ $version_prefix_val == "true" ]]; then
    echo "-----> Downloading version-suffixed binary"
    version_suffixed="y"
  else
    version_suffixed="n"
  fi
else
  if [[ $version == "0"* ]]; then
    echo "-----> Downloading version-suffixed binary"
    version_suffixed="y"
  else
    version_suffixed="n"
  fi
fi

version_dir="v$version"

# <1.0 binaries contain "v" prefix in their name
if [[ $version_suffixed == "y" ]]; then
  version_suffix="-v$version"
else
  if [[ $version == *"-mrb"* ]]; then
    version_suffix="-mrb"
  else
    version_suffix=""
  fi
fi

if [[ $version == *"-mrb"* ]]; then
  version_dir=${version_dir/"-mrb"/""}
fi

ANYCABLE_GO_CACHE="$CACHE_DIR/$binary_name-$version"

BIN_DIR=$(cd $(dirname $0); pwd)

if [ -f $ANYCABLE_GO_CACHE ]; then
  echo "-----> Using $binary_name $version from cache"
else
  echo "-----> Downloading $binary_name $version from $repo"
  $FETCH_PATH --repo=$repo --tag="${version_dir}" --release-asset="${binary_name}${version_suffix}-linux-amd64" --github-oauth-token="${token}" /tmp
  cp /tmp/${binary_name}${version_suffix}-linux-amd64 $ANYCABLE_GO_CACHE
fi

echo "-----> Copying binary"
cp $ANYCABLE_GO_CACHE $BIN_PATH/$binary_name

echo "-----> Setting permissions"
chmod +x $BIN_PATH/$binary_name

echo "-----> Verify that binary is working"
# prior version 0.6 we had only --version flag
$BIN_PATH/$binary_name -v || $BIN_PATH/$binary_name --version
